

1. Klassen und Objekte:
Erstellen Sie eine Klasse namens "Person", die die Eigenschaften einer Person darstellt, z. B. Name, Alter und Wohnort.
Erstellen Sie dann eine Instanz dieser Klasse und geben Sie die Eigenschaften aus.

Hinweis:

Erstellen Sie eine Klasse namens "Person" mit den gewünschten Attributen und Methoden.
Verwenden Sie den Konstruktor der Klasse, um eine Instanz zu erstellen.
Rufen Sie die Eigenschaften der Instanz über die entsprechenden Methoden auf und geben Sie sie aus.
2. Vererbung:
Erstellen Sie eine Klasse namens "Student", die von der Klasse "Person" erbt. Die Klasse "Student" sollte
zusätzlich zu den Eigenschaften einer Person auch eine Eigenschaft "Studienfach" enthalten. Erstellen Sie eine Instanz
der Klasse "Student" und geben Sie alle Eigenschaften aus.

Hinweis:

Erstellen Sie eine Klasse namens "Student", die von der Klasse "Person" erbt.
Fügen Sie der Klasse "Student" eine zusätzliche Eigenschaft "Studienfach" hinzu.
Verwenden Sie den Konstruktor der Klasse "Student", um eine Instanz zu erstellen und setzen Sie sowohl die allgemeinen
Eigenschaften einer Person als auch das Studienfach.
Rufen Sie die Eigenschaften der Instanz über die entsprechenden Methoden auf und geben Sie sie aus.

3. Polymorphismus:
Erstellen Sie eine abstrakte Klasse namens "Shape" mit einer abstrakten Methode "calculateArea()". Implementieren Sie
dann zwei konkrete Klassen "Circle" und "Rectangle", die von der Klasse "Shape" erben und die Methode "calculateArea()"
überschreiben, um die Fläche eines Kreises bzw. Rechtecks zu berechnen. Erstellen Sie Instanzen der Klasse "Circle" und
"Rectangle" und rufen Sie die Methode "calculateArea()" für jede Instanz auf.

Hinweis:

Erstellen Sie eine abstrakte Klasse "Shape" mit der abstrakten Methode "calculateArea()".
Erstellen Sie konkrete Klassen "Circle" und "Rectangle", die von "Shape" erben und die Methode "calculateArea()"
überschreiben.
Implementieren Sie in den überschreibenden Methoden die Berechnung der Fläche des Kreises bzw. des Rechtecks.
Erstellen Sie Instanzen der Klasse "Circle" und "Rectangle" und rufen Sie die Methode "calculateArea()" für jede Instanz
auf.

Erstellen Sie eine Klasse namens "BankAccount", die ein Bankkonto repräsentiert. Das Bankkonto sollte eine private
Eigenschaft "balance" haben, die den Kontostand speichert. Implementieren Sie Methoden, um den Kontostand abzurufen
und Einzahlungen oder Abhebungen vorzunehmen.

                                        Task 4: Online Shop

Entwerfen und implementieren Sie ein Klassensystem für einen Online-Shop. Der Shop bietet verschiedene Produkte an,
die in Kategorien organisiert sind. Kunden können Produkte in ihren Warenkorb legen und Bestellungen aufgeben.

                                    Hier sind die Anforderungen:

Erstellen Sie eine Klasse "Product" mit den Eigenschaften "name", "price" und "category". Implementieren Sie Getter- und
 Setter-Methoden für diese Eigenschaften.

Erstellen Sie eine Klasse "Category" mit der Eigenschaft "name". Implementieren Sie Getter- und Setter-Methoden für
diese Eigenschaft.

Erstellen Sie eine Klasse "Cart", die die Produkte enthält, die ein Kunde in den Warenkorb gelegt hat. Implementieren
Sie Methoden zum Hinzufügen und Entfernen von Produkten, zum Berechnen des Gesamtpreises der Produkte im Warenkorb und
zum Anzeigen des Inhalts des Warenkorbs.

Erstellen Sie eine Klasse "Customer" mit den Eigenschaften "name" und "email". Implementieren Sie Getter- und
Setter-Methoden für diese Eigenschaften.

Erstellen Sie eine Klasse "Order", die eine Bestellung repräsentiert und Informationen über den Kunden, den Warenkorb
und den Bestellzeitpunkt enthält. Implementieren Sie eine Methode zum Aufgeben der Bestellung und zum Anzeigen der
Details der Bestellung.

                                        Aufgabe 4:

Erstelle eine Klasse "BankAccount" (Bankkonto), um ein Bankkonto zu modellieren. Das Bankkonto sollte ein Attribut
"balance" (Kontostand) haben, das den aktuellen Kontostand des Kontos speichert.

Die Klasse "BankAccount" sollte folgende Methoden haben:

getBalance(): Diese Methode gibt den aktuellen Kontostand zurück.
setBalance(): Diese Methode akzeptiert einen Parameter balance und setzt den Kontostand auf den angegebenen Wert.
Zusätzlich gibt sie eine Nachricht aus, dass der Kontostand aktualisiert wurde.
deposit(): Diese Methode akzeptiert einen Parameter amount und fügt den angegebenen Betrag zum Kontostand hinzu.
Zusätzlich gibt sie eine Nachricht aus, dass der Betrag zum Kontostand hinzugefügt wurde.
withdraw(): Diese Methode akzeptiert einen Parameter amount und zieht den angegebenen Betrag vom Kontostand ab.
Wenn der Kontostand ausreicht, wird der Betrag abgezogen und eine Nachricht ausgegeben, dass der Betrag vom Kontostand
abgezogen wurde. Andernfalls wird eine Fehlermeldung ausgegeben, dass nicht genügend Guthaben auf dem Konto vorhanden ist.
Implementiere die Klasse "BankAccount" gemäß den obigen Anforderungen. Du kannst den Kontostand und die Transaktionen
in der Konsole überprüfen, indem du verschiedene Methodenaufrufe durchführst.

                                     Aufgabe 5:

Erstelle eine Klasse "Student" mit den folgenden Attributen:

name (String): Der Name des Studenten.
id (int): Die eindeutige Identifikationsnummer des Studenten.
courses (ArrayList<String>): Eine Liste der Kurse, die der Student belegt.
Die Klasse "Student" sollte folgende Methoden haben:

addCourse(String course): Diese Methode akzeptiert den Namen eines Kurses und fügt ihn der Liste der belegten Kurse hinzu.
removeCourse(String course): Diese Methode akzeptiert den Namen eines Kurses und entfernt ihn aus der Liste der belegten Kurse.
getCourses(): Diese Methode gibt die Liste der belegten Kurse zurück.
displayInfo(): Diese Methode gibt den Namen, die ID und die Liste der belegten Kurse des Studenten aus.
Implementiere die Klasse "Student" gemäß den obigen Anforderungen. Du kannst dann eine Instanz der Klasse "Student"
erstellen, Kurse hinzufügen und entfernen, die Liste der belegten Kurse abrufen und die Informationen des Studenten anzeigen.

                                                Aufgabe 6:
Erstelle eine abstrakte Klasse "Animal" (Tier), um ein Tier zu modellieren. Das Tier sollte ein Attribut "name" haben,
das den Namen des Tiers speichert.

Die abstrakte Klasse "Animal" sollte folgende Methoden haben:

getName(): Diese Methode gibt den Namen des Tiers zurück.
setName(): Diese Methode akzeptiert einen Parameter name und setzt den Namen des Tiers auf den angegebenen Wert.
makeSound(): Diese Methode ist abstrakt und sollte in den konkreten Unterklassen implementiert werden. Sie gibt den Laut
des Tiers aus.
Erstelle dann zwei konkrete Unterklassen der Klasse "Animal": "Dog" (Hund) und "Cat" (Katze).

Die Klasse "Dog" sollte eine spezifische Implementierung der Methode makeSound() haben, die den Laut eines Hundes ausgibt.

Die Klasse "Cat" sollte ebenfalls eine spezifische Implementierung der Methode makeSound() haben, die den Laut einer
Katze ausgibt.

Implementiere die abstrakte Klasse "Animal" sowie die konkreten Klassen "Dog" und "Cat" gemäß den obigen Anforderungen.

                                    Aufgabe: 7

Erstelle eine Klasse "Book" (Buch), um ein Buch zu modellieren. Das Buch sollte die folgenden Attribute haben:

title (String): Der Titel des Buches.
author (String): Der Autor des Buches.
pageCount (int): Die Anzahl der Seiten im Buch.
price (double): Der Preis des Buches.
Die Klasse "Book" sollte die folgenden Methoden haben:

getTitle(): Diese Methode gibt den Titel des Buches zurück.
getAuthor(): Diese Methode gibt den Autor des Buches zurück.
getPageCount(): Diese Methode gibt die Anzahl der Seiten im Buch zurück.
getPrice(): Diese Methode gibt den Preis des Buches zurück.
displayInfo(): Diese Methode gibt die Informationen des Buches aus, einschließlich Titel, Autor, Seitenanzahl und Preis.
Implementiere die Klasse "Book" gemäß den obigen Anforderungen. Du kannst dann eine Instanz der Klasse "Book" erstellen
und die Informationen des Buches anzeigen.

Aufgabe 8: Generische Klasse
Erstelle eine generische Klasse "Pair" (Paar), die zwei Werte unterschiedlichen Typs speichern kann. Die Klasse sollte
die folgenden Attribute haben:

first (Typparameter): Der erste Wert des Paares.
second (Typparameter): Der zweite Wert des Paares.
Implementiere die entsprechenden Getter- und Setter-Methoden für beide Attribute.

Erstelle dann eine Instanz der Klasse "Pair" mit den Typen String und Integer. Setze Werte für das Paar und gib sie auf
der Konsole aus.

                            Aufgabe 8: Dateiverwaltung

Erstelle eine Klasse "FileManager", die Methoden zur Verwaltung von Dateien bereitstellt. Die Klasse sollte die folgenden
Methoden haben:

createFile(String fileName): Diese Methode erstellt eine neue Datei mit dem angegebenen Dateinamen.
deleteFile(String fileName): Diese Methode löscht die angegebene Datei.
readFile(String fileName): Diese Methode liest den Inhalt der angegebenen Datei und gibt ihn als String zurück.
writeFile(String fileName, String content): Diese Methode schreibt den angegebenen Inhalt in die angegebene Datei.
appendFile(String fileName, String content): Diese Methode fügt den angegebenen Inhalt am Ende der angegebenen Datei
hinzu.
Implementiere die Klasse "FileManager" gemäß den obigen Anforderungen. Verwende die Methoden,
um eine Datei zu erstellen,
den Inhalt zu schreiben, den Inhalt zu lesen und die Datei zu löschen.
Überprüfe die Funktionalität deiner Implementierung.

